# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Secret key
# https://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = "simple-crm-global-crm-secure-key-for-jwt-hs256-algorithm-with-sufficient-entropy-and-length-to-meet-256-bit-requirement"


play.allowGlobalApplication = true

# Cache configuration - disable EhCache to avoid binding conflicts with Caffeine
play.modules.disabled += "play.api.cache.ehcache.EhCacheModule"
play.cache.defaultCache = "default"
play.cache.bindCaches = ["play"]

# Enable startup module for database initialization
play.modules.enabled += "modules.StartupModule"

play.filters.enabled += play.filters.hosts.AllowedHostsFilter
play.filters.enabled += filters.ExampleFilter

# --- Mailer configuration ---
play.mailer.host = "smtp.gmail.com"
play.mailer.port = 587
play.mailer.user = ${?SMTP_USER}
play.mailer.password = ${?SMTP_PASS}
play.mailer.tls = yes
play.mailer.from = "noreply@wellplanner.com"

# --- Google OAuth Configuration ---
google.oauth {
  clientId = "placeholder-client-id"
  clientSecret = "placeholder-client-secret"
  redirectUri = "http://localhost:9000/oauth2callback"
}

# Stripe Payment Configuration
stripe {
  publishableKey = ${?STRIPE_PUBLISHABLE_KEY}
  secretKey = ${?STRIPE_SECRET_KEY}
  webhookSecret = ${?STRIPE_WEBHOOK_SECRET}
  apiVersion = "2023-10-16"
  baseUrl = "https://api.stripe.com"
}

# Payment Configuration
payments {
  defaultCurrency = "USD"
  allowedCurrencies = ["USD", "EUR", "GBP", "CAD"]
  maxPaymentAmount = 100000  # $1000.00 in cents
  minPaymentAmount = 50      # $0.50 in cents
}

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["wellplanner.herokuapp.com", "localhost:7000", "localhost:9000", "127.0.0.1", ".herokuapp.com", "simple-crm-5528099374a3.herokuapp.com"]
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#


# Disable evolutions to avoid conflicts with legacy scripts
play.evolutions.enabled=true
play.evolutions.autoApply=true
play.evolutions {
  db.default.enabled = true
  applyEvolutions.db=true
  applyEvolutions.default=false
  applyDownEvolutions.default=false
}


# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`

# Heroku Dev Database
# //db.postgres.driver= "org.postgresql.Driver"
# //db.postgres.url="postgres://cbwfeenzykicve:e92e1782d6c31313dc703dc7c98311996741b9305dcb8d5c406c0b8eaceba144@ec2-3-230-106-126.compute-1.amazonaws.com:5432/depp9friigd0ta?sslmode=require"

# //db.postgres.driver= "org.postgresql.Driver"
# //db.postgres.url="postgres://kyubrtpqvqyvlp:9d81f5715481ecf6e6a6660bf16b981c9298c349d4b58641c9e88c30608b6ae5@ec2-35-172-73-125.compute-1.amazonaws.com:5432/dcseqocnltt7ig?sslmode=require"

# // heroku pg:psql postgresql-flexible-49935 --app well-planner-dev





# Dev Database
# db.postgres.driver= "org.postgresql.Driver"
# db.postgres.url="postgres://uuzgstegavjpqr:f179eef9be1f67f8e0a47cf10cee741c4a81cf1d11b7699c83535d1b0165b861@ec2-3-210-218-157.compute-1.amazonaws.com:5432/d5e67k2gi8p9vt?sslmode=require"

# Production Database
db.postgres.driver= "org.postgresql.Driver"
db.postgres.url="postgres://ufn98l5gojl2vd:p465c54815e41e1867e7431513d5de095dd5fdf1ce90a547aa20cc5e80cdc723e@ceqbglof0h8enj.cluster-czrs8kj4isg7.us-east-1.rds.amazonaws.com:5432/dalp090f6mbm9q?sslmode=require"



# Prod Database Config
//slick.dbs.default.profile="slick.jdbc.H2Profile$"
//slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
//slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
//slick.dbs.default.db.properties.url="postgres://qxbzkgexuiegny:6201d28c9dbcc393d0df285c3533449b89c8e92e43c0d964831a85bcd080300c@ec2-174-129-194-188.compute-1.amazonaws.com:5432/d649vcnlnijld3?sslmode=require"
//slick.dbs.default.db.properties.user = "qxbzkgexuiegny"
//slick.dbs.default.db.properties.password = "6201d28c9dbcc393d0df285c3533449b89c8e92e43c0d964831a85bcd080300c"
//slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"


# Heroku Dev Instance Config
//slick.dbs.default.profile="slick.jdbc.H2Profile$"
//slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
//slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
//slick.dbs.default.db.properties.url="postgres://cbwfeenzykicve:e92e1782d6c31313dc703dc7c98311996741b9305dcb8d5c406c0b8eaceba144@ec2-3-230-106-126.compute-1.amazonaws.com:5432/depp9friigd0ta?sslmode=require"
//slick.dbs.default.db.properties.user = "cbwfeenzykicve"
//slick.dbs.default.db.properties.password = "e92e1782d6c31313dc703dc7c98311996741b9305dcb8d5c406c0b8eaceba144"
//slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"




# Dev Database Config
//slick.dbs.default.profile="slick.jdbc.H2Profile$"
//slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
//slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
//slick.dbs.default.db.properties.url="postgres://kyubrtpqvqyvlp:9d81f5715481ecf6e6a6660bf16b981c9298c349d4b58641c9e88c30608b6ae5@ec2-35-172-73-125.compute-1.amazonaws.com:5432/dcseqocnltt7ig?sslmode=require"
//slick.dbs.default.db.properties.user = "kyubrtpqvqyvlp"
//slick.dbs.default.db.properties.password = "9d81f5715481ecf6e6a6660bf16b981c9298c349d4b58641c9e88c30608b6ae5"
//slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"


//Host
//ec2-3-210-218-157.compute-1.amazonaws.com
//Database
//d5e67k2gi8p9vt
//User
//uuzgstegavjpqr
//Port
//5432
//Password
//f179eef9be1f67f8e0a47cf10cee741c4a81cf1d11b7699c83535d1b0165b861
//URI
//postgres://uuzgstegavjpqr:f179eef9be1f67f8e0a47cf10cee741c4a81cf1d11b7699c83535d1b0165b861@ec2-3-210-218-157.compute-1.amazonaws.com:5432/d5e67k2gi8p9vt
//  Heroku CLI
//heroku pg:psql postgresql-concave-09875 --app wellplanner



# Local H2 in-memory database for development and testing
db.default.driver=org.h2.Driver
db.default.url="jdbc:h2:tcp://localhost:9123/./wellplanner;MODE=PostgreSQL;DATABASE_TO_UPPER=FALSE"
db.default.username=sa
db.default.password=""
db.default.logSql=true

# Slick configuration for H2
slick.dbs.default.profile="slick.jdbc.H2Profile$"
slick.dbs.default.db.driver="org.h2.Driver"
slick.dbs.default.db.url="jdbc:h2:tcp://localhost:9123/./wellplanner;MODE=PostgreSQL;DATABASE_TO_UPPER=FALSE"
slick.dbs.default.db.user="sa"
slick.dbs.default.db.password=""

# PostgreSQL configuration (commented out for local development)
# slick.dbs.default.profile="slick.jdbc.H2Profile$"
# slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
# slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
# slick.dbs.default.db.properties.url="postgres://uuzgstegavjpqr:f179eef9be1f67f8e0a47cf10cee741c4a81cf1d11b7699c83535d1b0165b861@ec2-3-210-218-157.compute-1.amazonaws.com:5432/d5e67k2gi8p9vt?sslmode=require"
# slick.dbs.default.db.properties.user = "uuzgstegavjpqr"
# slick.dbs.default.db.properties.password = "f179eef9be1f67f8e0a47cf10cee741c4a81cf1d11b7699c83535d1b0165b861"
# slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"



# Assets configuration
# ~~~~~
"assets.cache./public/stylesheets/bootstrap.min.css"="max-age=3600"


# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 2

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

# Prod Auth0 Information
# ~~~~~~~~~~~~~~~~~

auth0.clientSecret="kWNf6xf35XB47IOjQS2ZEGza4pS9R6XEYh1WvKSQFdni30REeTFyJ5iEDMmuMjIv"
auth0.clientId="BOjjaXe3n0T0TdfeCflTmT9i6ZrZiB9f"
auth0.domain="wellplanner.auth0.com"
auth0.callbackURL="https://simple-crm-5528099374a3.herokuapp.com/callback"
auth0.audience="https://wellplanner.auth0.com/dev/users"

# Stripe Configuration
# ~~~~~~~~~~~~~~~~~
# Add your actual Stripe API keys here for production use
stripe {
  secretKey = ${?STRIPE_SECRET_KEY}
  secretKey = "sk_test_placeholder_replace_with_actual_key"
  publishableKey = ${?STRIPE_PUBLISHABLE_KEY}
  publishableKey = "pk_test_placeholder_replace_with_actual_key"
  webhookSecret = ${?STRIPE_WEBHOOK_SECRET}
  webhookSecret = "whsec_placeholder_replace_with_actual_secret"
}
