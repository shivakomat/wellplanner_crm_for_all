# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
#include "extra-config.conf"
#
# You can declare variables and substitute for them:
#mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
#mykey = ${JAVA_HOME}

## Secret key
# https://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.http.secret.key = "wedding-planner"

//play.crypto.secret = "travel-buddiee"

play.allowGlobalApplication = true


play.filters.enabled += play.filters.hosts.AllowedHostsFilter
play.filters.enabled += filters.ExampleFilter

play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["wellplanner.herokuapp.com", "localhost:7000", "127.0.0.1", ".herokuapp.com"]
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#


play.evolutions.enabled=true
play.evolutions.autoApply=true
play.evolutions {
  db.default.enabled = true
  applyEvolutions.db=true
  applyEvolutions.default=true
  applyDownEvolutions.default=true
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`

# Heroku Dev Database
//db.postgres.driver= "org.postgresql.Driver"
//db.postgres.url="postgres://cbwfeenzykicve:e92e1782d6c31313dc703dc7c98311996741b9305dcb8d5c406c0b8eaceba144@ec2-3-230-106-126.compute-1.amazonaws.com:5432/depp9friigd0ta?sslmode=require"

//db.postgres.driver= "org.postgresql.Driver"
//db.postgres.url="postgres://kyubrtpqvqyvlp:9d81f5715481ecf6e6a6660bf16b981c9298c349d4b58641c9e88c30608b6ae5@ec2-35-172-73-125.compute-1.amazonaws.com:5432/dcseqocnltt7ig?sslmode=require"

// heroku pg:psql postgresql-flexible-49935 --app well-planner-dev

# Dev Database
db.postgres.driver= "org.postgresql.Driver"
db.postgres.url="postgres://gyljwsybcuiovl:8cee8dbfe1835982a48448eb1c4af5080222038168085e0ff736ea2534047d85@ec2-44-215-40-87.compute-1.amazonaws.com:5432/d1s31h5a00ubsk?sslmode=require"

# Production Database
//db.postgres.driver= "org.postgresql.Driver"
//db.postgres.url="postgres://qxbzkgexuiegny:6201d28c9dbcc393d0df285c3533449b89c8e92e43c0d964831a85bcd080300c@ec2-174-129-194-188.compute-1.amazonaws.com:5432/d649vcnlnijld3?sslmode=require"



# Prod Database Config
//slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
//slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
//slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
//slick.dbs.default.db.properties.url="postgres://qxbzkgexuiegny:6201d28c9dbcc393d0df285c3533449b89c8e92e43c0d964831a85bcd080300c@ec2-174-129-194-188.compute-1.amazonaws.com:5432/d649vcnlnijld3?sslmode=require"
//slick.dbs.default.db.properties.user = "qxbzkgexuiegny"
//slick.dbs.default.db.properties.password = "6201d28c9dbcc393d0df285c3533449b89c8e92e43c0d964831a85bcd080300c"
//slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"


# Heroku Dev Instance Config
//slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
//slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
//slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
//slick.dbs.default.db.properties.url="postgres://cbwfeenzykicve:e92e1782d6c31313dc703dc7c98311996741b9305dcb8d5c406c0b8eaceba144@ec2-3-230-106-126.compute-1.amazonaws.com:5432/depp9friigd0ta?sslmode=require"
//slick.dbs.default.db.properties.user = "cbwfeenzykicve"
//slick.dbs.default.db.properties.password = "e92e1782d6c31313dc703dc7c98311996741b9305dcb8d5c406c0b8eaceba144"
//slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"




# Dev Database Config
//slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
//slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
//slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
//slick.dbs.default.db.properties.url="postgres://kyubrtpqvqyvlp:9d81f5715481ecf6e6a6660bf16b981c9298c349d4b58641c9e88c30608b6ae5@ec2-35-172-73-125.compute-1.amazonaws.com:5432/dcseqocnltt7ig?sslmode=require"
//slick.dbs.default.db.properties.user = "kyubrtpqvqyvlp"
//slick.dbs.default.db.properties.password = "9d81f5715481ecf6e6a6660bf16b981c9298c349d4b58641c9e88c30608b6ae5"
//slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"


slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
slick.dbs.default.db.dataSourceClass = "slick.jdbc.DatabaseUrlDataSource"
slick.dbs.default.db.properties.driver = "org.postgresql.Driver"
slick.dbs.default.db.properties.url="postgres://gyljwsybcuiovl:8cee8dbfe1835982a48448eb1c4af5080222038168085e0ff736ea2534047d85@ec2-44-215-40-87.compute-1.amazonaws.com:5432/d1s31h5a00ubsk?sslmode=require"
slick.dbs.default.db.properties.user = "gyljwsybcuiovl"
slick.dbs.default.db.properties.password = "8cee8dbfe1835982a48448eb1c4af5080222038168085e0ff736ea2534047d85"
slick.dbs.default.db.connectionTestQuery = "SELECT 1" # workaround for bug in the postgres driver error: "Failed to execute isValid()"



# Assets configuration
# ~~~~~
"assets.cache./public/stylesheets/bootstrap.min.css"="max-age=3600"


# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 2

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

# Database Config
auth0.clientSecret="kWNf6xf35XB47IOjQS2ZEGza4pS9R6XEYh1WvKSQFdni30REeTFyJ5iEDMmuMjIv"
auth0.clientId="BOjjaXe3n0T0TdfeCflTmT9i6ZrZiB9f"
auth0.domain="wellplanner.auth0.com"
auth0.callbackURL="https://wellplanner.herokuapp.com/callback"
auth0.audience="https://wellplanner.auth0.com/dev/users"